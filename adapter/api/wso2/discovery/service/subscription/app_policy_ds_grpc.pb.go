// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApplicationPolicyDiscoveryServiceClient is the client API for ApplicationPolicyDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationPolicyDiscoveryServiceClient interface {
	StreamApplicationPolicies(ctx context.Context, opts ...grpc.CallOption) (ApplicationPolicyDiscoveryService_StreamApplicationPoliciesClient, error)
}

type applicationPolicyDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationPolicyDiscoveryServiceClient(cc grpc.ClientConnInterface) ApplicationPolicyDiscoveryServiceClient {
	return &applicationPolicyDiscoveryServiceClient{cc}
}

func (c *applicationPolicyDiscoveryServiceClient) StreamApplicationPolicies(ctx context.Context, opts ...grpc.CallOption) (ApplicationPolicyDiscoveryService_StreamApplicationPoliciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationPolicyDiscoveryService_serviceDesc.Streams[0], "/discovery.service.subscription.ApplicationPolicyDiscoveryService/StreamApplicationPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationPolicyDiscoveryServiceStreamApplicationPoliciesClient{stream}
	return x, nil
}

type ApplicationPolicyDiscoveryService_StreamApplicationPoliciesClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type applicationPolicyDiscoveryServiceStreamApplicationPoliciesClient struct {
	grpc.ClientStream
}

func (x *applicationPolicyDiscoveryServiceStreamApplicationPoliciesClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationPolicyDiscoveryServiceStreamApplicationPoliciesClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationPolicyDiscoveryServiceServer is the server API for ApplicationPolicyDiscoveryService service.
// All implementations must embed UnimplementedApplicationPolicyDiscoveryServiceServer
// for forward compatibility
type ApplicationPolicyDiscoveryServiceServer interface {
	StreamApplicationPolicies(ApplicationPolicyDiscoveryService_StreamApplicationPoliciesServer) error
	mustEmbedUnimplementedApplicationPolicyDiscoveryServiceServer()
}

// UnimplementedApplicationPolicyDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationPolicyDiscoveryServiceServer struct {
}

func (UnimplementedApplicationPolicyDiscoveryServiceServer) StreamApplicationPolicies(ApplicationPolicyDiscoveryService_StreamApplicationPoliciesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamApplicationPolicies not implemented")
}
func (UnimplementedApplicationPolicyDiscoveryServiceServer) mustEmbedUnimplementedApplicationPolicyDiscoveryServiceServer() {
}

// UnsafeApplicationPolicyDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationPolicyDiscoveryServiceServer will
// result in compilation errors.
type UnsafeApplicationPolicyDiscoveryServiceServer interface {
	mustEmbedUnimplementedApplicationPolicyDiscoveryServiceServer()
}

func RegisterApplicationPolicyDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ApplicationPolicyDiscoveryServiceServer) {
	s.RegisterService(&_ApplicationPolicyDiscoveryService_serviceDesc, srv)
}

func _ApplicationPolicyDiscoveryService_StreamApplicationPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationPolicyDiscoveryServiceServer).StreamApplicationPolicies(&applicationPolicyDiscoveryServiceStreamApplicationPoliciesServer{stream})
}

type ApplicationPolicyDiscoveryService_StreamApplicationPoliciesServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type applicationPolicyDiscoveryServiceStreamApplicationPoliciesServer struct {
	grpc.ServerStream
}

func (x *applicationPolicyDiscoveryServiceStreamApplicationPoliciesServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationPolicyDiscoveryServiceStreamApplicationPoliciesServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ApplicationPolicyDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.subscription.ApplicationPolicyDiscoveryService",
	HandlerType: (*ApplicationPolicyDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamApplicationPolicies",
			Handler:       _ApplicationPolicyDiscoveryService_StreamApplicationPolicies_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/subscription/app_policy_ds.proto",
}
