// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionPolicyDiscoveryServiceClient is the client API for SubscriptionPolicyDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionPolicyDiscoveryServiceClient interface {
	StreamSubscriptionPolicies(ctx context.Context, opts ...grpc.CallOption) (SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesClient, error)
}

type subscriptionPolicyDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionPolicyDiscoveryServiceClient(cc grpc.ClientConnInterface) SubscriptionPolicyDiscoveryServiceClient {
	return &subscriptionPolicyDiscoveryServiceClient{cc}
}

func (c *subscriptionPolicyDiscoveryServiceClient) StreamSubscriptionPolicies(ctx context.Context, opts ...grpc.CallOption) (SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SubscriptionPolicyDiscoveryService_serviceDesc.Streams[0], "/discovery.service.subscription.SubscriptionPolicyDiscoveryService/StreamSubscriptionPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesClient{stream}
	return x, nil
}

type SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesClient struct {
	grpc.ClientStream
}

func (x *subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionPolicyDiscoveryServiceServer is the server API for SubscriptionPolicyDiscoveryService service.
// All implementations must embed UnimplementedSubscriptionPolicyDiscoveryServiceServer
// for forward compatibility
type SubscriptionPolicyDiscoveryServiceServer interface {
	StreamSubscriptionPolicies(SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesServer) error
	mustEmbedUnimplementedSubscriptionPolicyDiscoveryServiceServer()
}

// UnimplementedSubscriptionPolicyDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionPolicyDiscoveryServiceServer struct {
}

func (UnimplementedSubscriptionPolicyDiscoveryServiceServer) StreamSubscriptionPolicies(SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSubscriptionPolicies not implemented")
}
func (UnimplementedSubscriptionPolicyDiscoveryServiceServer) mustEmbedUnimplementedSubscriptionPolicyDiscoveryServiceServer() {
}

// UnsafeSubscriptionPolicyDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionPolicyDiscoveryServiceServer will
// result in compilation errors.
type UnsafeSubscriptionPolicyDiscoveryServiceServer interface {
	mustEmbedUnimplementedSubscriptionPolicyDiscoveryServiceServer()
}

func RegisterSubscriptionPolicyDiscoveryServiceServer(s grpc.ServiceRegistrar, srv SubscriptionPolicyDiscoveryServiceServer) {
	s.RegisterService(&_SubscriptionPolicyDiscoveryService_serviceDesc, srv)
}

func _SubscriptionPolicyDiscoveryService_StreamSubscriptionPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubscriptionPolicyDiscoveryServiceServer).StreamSubscriptionPolicies(&subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesServer{stream})
}

type SubscriptionPolicyDiscoveryService_StreamSubscriptionPoliciesServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesServer struct {
	grpc.ServerStream
}

func (x *subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subscriptionPolicyDiscoveryServiceStreamSubscriptionPoliciesServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SubscriptionPolicyDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.subscription.SubscriptionPolicyDiscoveryService",
	HandlerType: (*SubscriptionPolicyDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSubscriptionPolicies",
			Handler:       _SubscriptionPolicyDiscoveryService_StreamSubscriptionPolicies_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/subscription/sub_policy_ds.proto",
}
