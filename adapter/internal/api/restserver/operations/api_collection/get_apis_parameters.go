// Code generated by go-swagger; DO NOT EDIT.

package api_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetApisParams creates a new GetApisParams object
//
// There are no default values defined in the spec.
func NewGetApisParams() GetApisParams {

	return GetApisParams{}
}

// GetApisParams contains all the bound params for the get apis operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetApis
type GetApisParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Number of APIs (APIMeta objects to return)

	  Maximum: 1e+08
	  Minimum: 1
	  In: query
	*/
	Limit *int64
	/*Optional - Condition to filter APIs. Currently only filtering
	by API type (HTTP or WebSocket) is supported.
	"type:http" for HTTP type
	"type:ws" for WebSocket type

	  Max Length: 9
	  Pattern: ^[a-zA-Z:]*$
	  In: query
	*/
	Query *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetApisParams() beforehand.
func (o *GetApisParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuery, qhkQuery, _ := qs.GetOK("query")
	if err := o.bindQuery(qQuery, qhkQuery, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetApisParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetApisParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 1e+08, false); err != nil {
		return err
	}

	return nil
}

// bindQuery binds and validates parameter Query from query.
func (o *GetApisParams) bindQuery(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Query = &raw

	if err := o.validateQuery(formats); err != nil {
		return err
	}

	return nil
}

// validateQuery carries on validations for parameter Query
func (o *GetApisParams) validateQuery(formats strfmt.Registry) error {

	if err := validate.MaxLength("query", "query", *o.Query, 9); err != nil {
		return err
	}

	if err := validate.Pattern("query", "query", *o.Query, `^[a-zA-Z:]*$`); err != nil {
		return err
	}

	return nil
}
