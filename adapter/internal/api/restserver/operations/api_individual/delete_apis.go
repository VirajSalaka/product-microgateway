// Code generated by go-swagger; DO NOT EDIT.

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/wso2/adapter/internal/api/models"
)

// DeleteApisHandlerFunc turns a function with the right signature into a delete apis handler
type DeleteApisHandlerFunc func(DeleteApisParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteApisHandlerFunc) Handle(params DeleteApisParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteApisHandler interface for that can handle valid delete apis params
type DeleteApisHandler interface {
	Handle(DeleteApisParams, *models.Principal) middleware.Responder
}

// NewDeleteApis creates a new http.Handler for the delete apis operation
func NewDeleteApis(ctx *middleware.Context, handler DeleteApisHandler) *DeleteApis {
	return &DeleteApis{Context: ctx, Handler: handler}
}

/* DeleteApis swagger:route DELETE /apis API (Individual) deleteApis

Delete deployed API

This operation can be used to delete a API that was deployed


*/
type DeleteApis struct {
	Context *middleware.Context
	Handler DeleteApisHandler
}

func (o *DeleteApis) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteApisParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
