// Code generated by go-swagger; DO NOT EDIT.

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/wso2/adapter/internal/api/models"
)

// DeleteApisOKCode is the HTTP code returned for type DeleteApisOK
const DeleteApisOKCode int = 200

/*DeleteApisOK OK.
API successfully undeployed from the Microgateway.


swagger:response deleteApisOK
*/
type DeleteApisOK struct {

	/*
	  In: Body
	*/
	Payload *models.DeployResponse `json:"body,omitempty"`
}

// NewDeleteApisOK creates DeleteApisOK with default headers values
func NewDeleteApisOK() *DeleteApisOK {

	return &DeleteApisOK{}
}

// WithPayload adds the payload to the delete apis o k response
func (o *DeleteApisOK) WithPayload(payload *models.DeployResponse) *DeleteApisOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete apis o k response
func (o *DeleteApisOK) SetPayload(payload *models.DeployResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteApisOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteApisBadRequestCode is the HTTP code returned for type DeleteApisBadRequest
const DeleteApisBadRequestCode int = 400

/*DeleteApisBadRequest Bad Request.
Invalid request or validation error


swagger:response deleteApisBadRequest
*/
type DeleteApisBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteApisBadRequest creates DeleteApisBadRequest with default headers values
func NewDeleteApisBadRequest() *DeleteApisBadRequest {

	return &DeleteApisBadRequest{}
}

// WithPayload adds the payload to the delete apis bad request response
func (o *DeleteApisBadRequest) WithPayload(payload *models.Error) *DeleteApisBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete apis bad request response
func (o *DeleteApisBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteApisBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteApisUnauthorizedCode is the HTTP code returned for type DeleteApisUnauthorized
const DeleteApisUnauthorizedCode int = 401

/*DeleteApisUnauthorized Unauthorized. Invalid authentication credentials.

swagger:response deleteApisUnauthorized
*/
type DeleteApisUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteApisUnauthorized creates DeleteApisUnauthorized with default headers values
func NewDeleteApisUnauthorized() *DeleteApisUnauthorized {

	return &DeleteApisUnauthorized{}
}

// WithPayload adds the payload to the delete apis unauthorized response
func (o *DeleteApisUnauthorized) WithPayload(payload *models.Error) *DeleteApisUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete apis unauthorized response
func (o *DeleteApisUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteApisUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteApisNotFoundCode is the HTTP code returned for type DeleteApisNotFound
const DeleteApisNotFoundCode int = 404

/*DeleteApisNotFound Not Found.
Requested API does not exist.


swagger:response deleteApisNotFound
*/
type DeleteApisNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteApisNotFound creates DeleteApisNotFound with default headers values
func NewDeleteApisNotFound() *DeleteApisNotFound {

	return &DeleteApisNotFound{}
}

// WithPayload adds the payload to the delete apis not found response
func (o *DeleteApisNotFound) WithPayload(payload *models.Error) *DeleteApisNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete apis not found response
func (o *DeleteApisNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteApisNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteApisInternalServerErrorCode is the HTTP code returned for type DeleteApisInternalServerError
const DeleteApisInternalServerErrorCode int = 500

/*DeleteApisInternalServerError Internal Server Error.

swagger:response deleteApisInternalServerError
*/
type DeleteApisInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteApisInternalServerError creates DeleteApisInternalServerError with default headers values
func NewDeleteApisInternalServerError() *DeleteApisInternalServerError {

	return &DeleteApisInternalServerError{}
}

// WithPayload adds the payload to the delete apis internal server error response
func (o *DeleteApisInternalServerError) WithPayload(payload *models.Error) *DeleteApisInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete apis internal server error response
func (o *DeleteApisInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteApisInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
