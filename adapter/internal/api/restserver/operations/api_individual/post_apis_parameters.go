// Code generated by go-swagger; DO NOT EDIT.

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostApisMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostApisMaxParseMemory int64 = 32 << 20

// NewPostApisParams creates a new PostApisParams object
//
// There are no default values defined in the spec.
func NewPostApisParams() PostApisParams {

	return PostApisParams{}
}

// PostApisParams contains all the bound params for the post apis operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostApis
type PostApisParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Zip archive consisting on exported api configuration

	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*Whether to force create an API. When this is true, overrides if  an API already exists.

	  In: query
	*/
	Override *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostApisParams() beforehand.
func (o *PostApisParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(PostApisMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	qOverride, qhkOverride, _ := qs.GetOK("override")
	if err := o.bindOverride(qOverride, qhkOverride, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *PostApisParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindOverride binds and validates parameter Override from query.
func (o *PostApisParams) bindOverride(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("override", "query", "bool", raw)
	}
	o.Override = &value

	return nil
}
