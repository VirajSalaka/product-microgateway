// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApiListDiscoveryServiceClient is the client API for ApiListDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiListDiscoveryServiceClient interface {
	StreamApiList(ctx context.Context, opts ...grpc.CallOption) (ApiListDiscoveryService_StreamApiListClient, error)
}

type apiListDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiListDiscoveryServiceClient(cc grpc.ClientConnInterface) ApiListDiscoveryServiceClient {
	return &apiListDiscoveryServiceClient{cc}
}

func (c *apiListDiscoveryServiceClient) StreamApiList(ctx context.Context, opts ...grpc.CallOption) (ApiListDiscoveryService_StreamApiListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApiListDiscoveryService_serviceDesc.Streams[0], "/discovery.service.subscription.ApiListDiscoveryService/StreamApiList", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiListDiscoveryServiceStreamApiListClient{stream}
	return x, nil
}

type ApiListDiscoveryService_StreamApiListClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type apiListDiscoveryServiceStreamApiListClient struct {
	grpc.ClientStream
}

func (x *apiListDiscoveryServiceStreamApiListClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiListDiscoveryServiceStreamApiListClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiListDiscoveryServiceServer is the server API for ApiListDiscoveryService service.
// All implementations must embed UnimplementedApiListDiscoveryServiceServer
// for forward compatibility
type ApiListDiscoveryServiceServer interface {
	StreamApiList(ApiListDiscoveryService_StreamApiListServer) error
	mustEmbedUnimplementedApiListDiscoveryServiceServer()
}

// UnimplementedApiListDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiListDiscoveryServiceServer struct {
}

func (UnimplementedApiListDiscoveryServiceServer) StreamApiList(ApiListDiscoveryService_StreamApiListServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamApiList not implemented")
}
func (UnimplementedApiListDiscoveryServiceServer) mustEmbedUnimplementedApiListDiscoveryServiceServer() {
}

// UnsafeApiListDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiListDiscoveryServiceServer will
// result in compilation errors.
type UnsafeApiListDiscoveryServiceServer interface {
	mustEmbedUnimplementedApiListDiscoveryServiceServer()
}

func RegisterApiListDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ApiListDiscoveryServiceServer) {
	s.RegisterService(&_ApiListDiscoveryService_serviceDesc, srv)
}

func _ApiListDiscoveryService_StreamApiList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiListDiscoveryServiceServer).StreamApiList(&apiListDiscoveryServiceStreamApiListServer{stream})
}

type ApiListDiscoveryService_StreamApiListServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type apiListDiscoveryServiceStreamApiListServer struct {
	grpc.ServerStream
}

func (x *apiListDiscoveryServiceStreamApiListServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiListDiscoveryServiceStreamApiListServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ApiListDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.subscription.ApiListDiscoveryService",
	HandlerType: (*ApiListDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamApiList",
			Handler:       _ApiListDiscoveryService_StreamApiList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/subscription/apids.proto",
}
