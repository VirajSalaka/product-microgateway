// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApplicationDiscoveryServiceClient is the client API for ApplicationDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationDiscoveryServiceClient interface {
	StreamApplications(ctx context.Context, opts ...grpc.CallOption) (ApplicationDiscoveryService_StreamApplicationsClient, error)
}

type applicationDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationDiscoveryServiceClient(cc grpc.ClientConnInterface) ApplicationDiscoveryServiceClient {
	return &applicationDiscoveryServiceClient{cc}
}

func (c *applicationDiscoveryServiceClient) StreamApplications(ctx context.Context, opts ...grpc.CallOption) (ApplicationDiscoveryService_StreamApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationDiscoveryService_serviceDesc.Streams[0], "/discovery.service.subscription.ApplicationDiscoveryService/StreamApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationDiscoveryServiceStreamApplicationsClient{stream}
	return x, nil
}

type ApplicationDiscoveryService_StreamApplicationsClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type applicationDiscoveryServiceStreamApplicationsClient struct {
	grpc.ClientStream
}

func (x *applicationDiscoveryServiceStreamApplicationsClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationDiscoveryServiceStreamApplicationsClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationDiscoveryServiceServer is the server API for ApplicationDiscoveryService service.
// All implementations must embed UnimplementedApplicationDiscoveryServiceServer
// for forward compatibility
type ApplicationDiscoveryServiceServer interface {
	StreamApplications(ApplicationDiscoveryService_StreamApplicationsServer) error
	mustEmbedUnimplementedApplicationDiscoveryServiceServer()
}

// UnimplementedApplicationDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationDiscoveryServiceServer struct {
}

func (UnimplementedApplicationDiscoveryServiceServer) StreamApplications(ApplicationDiscoveryService_StreamApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamApplications not implemented")
}
func (UnimplementedApplicationDiscoveryServiceServer) mustEmbedUnimplementedApplicationDiscoveryServiceServer() {
}

// UnsafeApplicationDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationDiscoveryServiceServer will
// result in compilation errors.
type UnsafeApplicationDiscoveryServiceServer interface {
	mustEmbedUnimplementedApplicationDiscoveryServiceServer()
}

func RegisterApplicationDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ApplicationDiscoveryServiceServer) {
	s.RegisterService(&_ApplicationDiscoveryService_serviceDesc, srv)
}

func _ApplicationDiscoveryService_StreamApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationDiscoveryServiceServer).StreamApplications(&applicationDiscoveryServiceStreamApplicationsServer{stream})
}

type ApplicationDiscoveryService_StreamApplicationsServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type applicationDiscoveryServiceStreamApplicationsServer struct {
	grpc.ServerStream
}

func (x *applicationDiscoveryServiceStreamApplicationsServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationDiscoveryServiceStreamApplicationsServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ApplicationDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.subscription.ApplicationDiscoveryService",
	HandlerType: (*ApplicationDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamApplications",
			Handler:       _ApplicationDiscoveryService_StreamApplications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/subscription/appds.proto",
}
