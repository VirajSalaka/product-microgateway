// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionDiscoveryServiceClient is the client API for SubscriptionDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionDiscoveryServiceClient interface {
	StreamSubscriptions(ctx context.Context, opts ...grpc.CallOption) (SubscriptionDiscoveryService_StreamSubscriptionsClient, error)
}

type subscriptionDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionDiscoveryServiceClient(cc grpc.ClientConnInterface) SubscriptionDiscoveryServiceClient {
	return &subscriptionDiscoveryServiceClient{cc}
}

func (c *subscriptionDiscoveryServiceClient) StreamSubscriptions(ctx context.Context, opts ...grpc.CallOption) (SubscriptionDiscoveryService_StreamSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SubscriptionDiscoveryService_serviceDesc.Streams[0], "/discovery.service.subscription.SubscriptionDiscoveryService/StreamSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionDiscoveryServiceStreamSubscriptionsClient{stream}
	return x, nil
}

type SubscriptionDiscoveryService_StreamSubscriptionsClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type subscriptionDiscoveryServiceStreamSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *subscriptionDiscoveryServiceStreamSubscriptionsClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subscriptionDiscoveryServiceStreamSubscriptionsClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionDiscoveryServiceServer is the server API for SubscriptionDiscoveryService service.
// All implementations must embed UnimplementedSubscriptionDiscoveryServiceServer
// for forward compatibility
type SubscriptionDiscoveryServiceServer interface {
	StreamSubscriptions(SubscriptionDiscoveryService_StreamSubscriptionsServer) error
	mustEmbedUnimplementedSubscriptionDiscoveryServiceServer()
}

// UnimplementedSubscriptionDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionDiscoveryServiceServer struct {
}

func (UnimplementedSubscriptionDiscoveryServiceServer) StreamSubscriptions(SubscriptionDiscoveryService_StreamSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSubscriptions not implemented")
}
func (UnimplementedSubscriptionDiscoveryServiceServer) mustEmbedUnimplementedSubscriptionDiscoveryServiceServer() {
}

// UnsafeSubscriptionDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionDiscoveryServiceServer will
// result in compilation errors.
type UnsafeSubscriptionDiscoveryServiceServer interface {
	mustEmbedUnimplementedSubscriptionDiscoveryServiceServer()
}

func RegisterSubscriptionDiscoveryServiceServer(s grpc.ServiceRegistrar, srv SubscriptionDiscoveryServiceServer) {
	s.RegisterService(&_SubscriptionDiscoveryService_serviceDesc, srv)
}

func _SubscriptionDiscoveryService_StreamSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubscriptionDiscoveryServiceServer).StreamSubscriptions(&subscriptionDiscoveryServiceStreamSubscriptionsServer{stream})
}

type SubscriptionDiscoveryService_StreamSubscriptionsServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type subscriptionDiscoveryServiceStreamSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *subscriptionDiscoveryServiceStreamSubscriptionsServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subscriptionDiscoveryServiceStreamSubscriptionsServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SubscriptionDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.subscription.SubscriptionDiscoveryService",
	HandlerType: (*SubscriptionDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSubscriptions",
			Handler:       _SubscriptionDiscoveryService_StreamSubscriptions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/subscription/sds.proto",
}
