import wso2/gateway;
import ballerina/http;
import ballerina/log;

{{#if containerConfig.hasDocker}}import ballerinax/docker;{{/if}}
{{#if containerConfig.kubernetes.kubernetesService.enable}}import ballerinax/kubernetes;{{/if}}

//Throttle tier data initiation

{{#if config.mutualSSL.certificateDetails}}
    json ClientCerts ={{{config.mutualSSL.certificateDetails}}};
{{else}}
    json ClientCerts=null;
{{/if}}



//Get mutualSSL filter
gateway: MutualSSLFilter  mtslFilter= new;
// Get authentication filter
gateway:AuthnFilter authnFilter = new;
// Subscription validation filter
// Authorization filter
gateway:OAuthzFilter authorizationFilter = gateway:getDefaultAuthorizationFilter();
gateway:SubscriptionFilter subscriptionFilter = new;
// Get deployed policies
map<string> deployedPolicies = getDeployedPolicies();
// Throttling filter
gateway:ThrottleFilter throttleFilter = new(deployedPolicies);
// Validation filter
gateway:ValidationFilter validationFilter = new;
// Analytics filter
gateway:AnalyticsRequestFilter analyticsFilter = new;
// Extension filter
ExtensionFilter extensionFilter;

http:ServiceEndpointConfiguration secureServiceEndpointConfiguration = { {{>http2}},
                                                                           {{>mutualSSL}}
                                                                           filters:[mtslFilter, authnFilter, authorizationFilter, subscriptionFilter, throttleFilter, validationFilter, analyticsFilter,
                                                                           extensionFilter]
                                                                       };

{{>docker}}
{{>secureKubernetesIngress}}
{{>kubernetesService}}
listener gateway:APIGatewaySecureListener apiSecureListener = new(secureServiceEndpointConfiguration);

http:ServiceEndpointConfiguration serviceEndpointConfiguration = { {{>http2}},
                                                                     filters:[authnFilter, authorizationFilter, subscriptionFilter, throttleFilter, validationFilter, analyticsFilter,
                                                                     extensionFilter]
                                                                 };

{{>kubernetesIngress}}
{{>kubernetesService}}
listener gateway:APIGatewayListener apiListener = new(serviceEndpointConfiguration);

