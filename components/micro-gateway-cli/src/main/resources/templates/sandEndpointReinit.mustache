etcdKey = gateway:retrieveConfig(etcdKeyConfigValue, "");
                    if (etcdKey != "" && gateway:etcdConnectionEstablished) {
                        hasUrlChanged = <boolean>gateway:urlChanged[etcdKey];
                        if(hasUrlChanged is boolean) {
			    reinitRequired = hasUrlChanged;
			} else {
			    log:printError("Error in checking for Re-initialization", err = hasUrlChanged);
			}

                        if (reinitRequired) {

                            destination_attribute = <string>gateway:etcdUrls[etcdKey];
                            {{#if hasProdEpConfig}}
                                {{#equals epConfig.prodEndpoints.type "http"}} {{#epConfig.prodEndpoints}}{{>httpEndpointReInit}}{{/epConfig.prodEndpoints}} {{/equals}}
                                {{#equals epConfig.prodEndpoints.type "load_balance"}} {{#epConfig.prodEndpoints}}{{>lbEndpointReInit}}{{/epConfig.prodEndpoints}} {{/equals}}
                                {{#equals epConfig.prodEndpoints.type "failover"}} {{#epConfig.prodEndpoints}}{{>failoverEndpointReInit}}{{/epConfig.prodEndpoints}} {{/equals}}
                            {{else}}
                                {{#equals endpointConfig.prodEndpoints.type "http"}} {{#endpointConfig.prodEndpoints}}{{>httpEndpointReInit}}{{/endpointConfig.prodEndpoints}} {{/equals}}
                                {{#equals endpointConfig.prodEndpoints.type "load_balance"}} {{#endpointConfig.prodEndpoints}}{{>lbEndpointReInit}}{{/endpointConfig.prodEndpoints}} {{/equals}}
                                {{#equals endpointConfig.prodEndpoints.type "failover"}} {{#endpointConfig.prodEndpoints}}{{>failoverEndpointReInit}}{{/endpointConfig.prodEndpoints}} {{/equals}}
                            {{/if}}
                            if(err is error) {
				                reinitFailed = true;
                                gateway:urlChanged[etcdKey] = true;

                                http:Response res = new;
                                res.statusCode = 500;
                                json payload = {
                                    "fault": {
                                        "code": "101503",
                                        "message": "Runtime Error",
                                        "description": "Error connecting to the back end"
                                    }
                                };
                                runtime:getInvocationContext().attributes["error_code"] = "101503";
                                res.setPayload(payload);
                                clientResponse = res;
                                log:printError("URL defined at etcd for key " + config:getAsString(etcdKeyConfigValue) + " is invalid");
}

                        }

                    }


                        if (!reinitFailed) {
                        clientResponse = {{#if hasSandEpConfig}}{{operationId}}{{else}}{{qualifiedServiceName}}{{/if}}_sand->forward(urlPostfix, req);
                        runtime:getInvocationContext().attributes["destination"] = destination_attribute;
                    }
