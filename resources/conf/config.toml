# The configuration file for mgw

[adapter] # --------------------------------------------------------

# server: configuration related to REST API
[adapter.server]
  host = "0.0.0.0"
  port = "9843"
  tokenTTL = "1h"
  tokenPrivateKeyPath = "/home/wso2/security/keystore/mg.key"
  [[adapter.server.users]]
    username = "admin"
    password = "$env{adapter_admin_pwd}"

[adapter.keystore]
  certPath = "/home/wso2/security/keystore/mg.pem"
  keyPath = "/home/wso2/security/keystore/mg.key"

[adapter.truststore]
  location = "/home/wso2/security/truststore"

[adapter.consul]
  # todo rumesh check whether we need to have certPath and KeyPath
  enable = false
  url = "https://169.254.1.1:8501" # scheme + host ip + port
  pollInterval = 5 # seconds
  aclTokenFilePath = ""
  # certs for tls
  caCertPath = "/home/wso2/security/truststore/consul/consul-agent-ca.pem"
  certPath = "/home/wso2/security/truststore/consul/local-dc-client-consul-0.pem"
  keyPath = "/home/wso2/security/truststore/consul/local-dc-client-consul-0-key.pem"

[envoy] # --------------------------------------------------------
  listenerHost = "0.0.0.0"
  listenerPort = 9095
  clusterTimeoutInSeconds = 20
  listenerTLSEnabled = true

[envoy.keystore]
  certPath = "/home/wso2/security/keystore/mg.pem"
  keyPath = "/home/wso2/security/keystore/mg.key"

[envoy.upstream]
[envoy.upstream.tls]
  minimumProtocolVersion = "TLS1_1"
  maximumProtocolVersion = "TLS1_2"
  ciphers = "ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES128-SHA, ECDHE-RSA-AES128-SHA, AES128-GCM-SHA256, AES128-SHA, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES256-SHA, AES256-GCM-SHA384, AES256-SHA"  
  # the default endpoint certificates
  trustedCertPath = "/etc/ssl/certs/ca-certificates.crt"
  verifyHostName = true
  disableSslVerification = false

[enforcer] # --------------------------------------------------------

[enforcer.authService]
  port = 8081
  maxMessageSize = 1000000000
  maxHeaderLimit = 8192
  #keep alive time of the external authz connection
  keepAliveTime = 600
  [enforcer.authService.threadPool]
    coreSize = 400
    maxSize = 500
    #keep alive time of threads in seconds
    keepAliveTime = 600
    queueSize = 1000

# JWT token authorization configurations. You can provide multiple JWT issuers
# Issuer 1
[[enforcer.jwtTokenConfig]]
  name="Resident Key Manager"
  issuer = "https://localhost:9443/oauth2/token"
  certificateAlias = "wso2carbon"
  # URL of the JWKs endpoint
  jwksURL = ""
  # Validate subscribed APIs
  validateSubscription = false
  # The claim in which the consumer key of the application is coming
  consumerKeyClaim = "azp"
  # Certificate Filepath within enforcer
  certificateFilePath = "/home/wso2/security/truststore/wso2carbon.pem"
  [[enforcer.jwtTokenConfig.claimMapping]]
    remoteClaim = "sub"
    localClaim = "CUSTOM-CLAIM"

# Issuer 2
[[enforcer.jwtTokenConfig]]
    name="MGW"
    issuer = "https://localhost:9095/token"
    certificateAlias = "mgw"
    # URL of the JWKs endpoint
    jwksURL = ""
    # Validate subscribed APIs
    validateSubscription = false
    # The claim in which the consumer key of the application is coming
    consumerKeyClaim = ""
    # Certificate Filepath within enforcer
    certificateFilePath = "/home/wso2/security/truststore/mg.pem"

[enforcer.apimCredentials]
  username="admin"
  password="$env{apim_admin_pwd}"

[enforcer.cache]
  enabled = true
  maximumSize = 10000
  expiryTime = 15

[enforcer.jwtGenerator]
  enable = false
  encoding = "base64" # base64,base64url
  claimDialect = "http://wso2.org/claims"
  convertDialect = false
  header = "X-JWT-Assertion"
  signingAlgorithm = "SHA256withRSA"
  enableUserClaims = false
  gatewayGeneratorImpl = "org.wso2.carbon.apimgt.common.gateway.jwtgenerator.APIMgtGatewayJWTGeneratorImpl"
  claimsExtractorImpl = "org.wso2.carbon.apimgt.impl.token.ExtendedDefaultClaimsRetriever"
  publicCertificatePath = "/home/wso2/security/truststore/mg.pem"
  privateKeyPath = "/home/wso2/security/keystore/mg.key"

[enforcer.jwtIssuer]
  enabled = true
  issuer = "https://localhost:9095/token"
  encoding = "base64" # base64,base64url
  claimDialect = ""
  signingAlgorithm = "SHA256withRSA"
  publicCertificatePath = "/home/wso2/security/truststore/mg.pem"
  privateKeyPath = "/home/wso2/security/keystore/mg.key"
  validityPeriod = 3600 # seconds
  [[enforcer.jwtIssuer.jwtUser]]
    username = "admin"
    password = "admin"

# Throttling configurations
[enforcer.throttling]
  # Connect with the central traffic manager
  enableGlobalEventPublishing = false
  # Enable global advanced throttling based on request header conditions
  enableHeaderConditions = false
  # Enable global advanced throttling based on request query parameter conditions
  enableQueryParamConditions = false
  # Enable global advanced throttling based on jwt claim conditions
  enableJwtClaimConditions = false
  # The message broker context factory
  jmsConnectioninitialContextFactory = "org.wso2.andes.jndi.PropertiesFileInitialContextFactory"
  # The message broker connection URL
  jmsConnectionProviderUrl = "amqp://admin:admin@carbon/carbon?brokerlist='tcp://localhost:5672'"
  # Throttling configurations related to event publishing using a binary connection
  [enforcer.throttling.publisher]
    # Credentials required to establish connection between Traffic Manager
    username = "admin"
    password = "admin"
    # Receiver URL and the authentication URL of the Traffic manager node/nodes
    [[enforcer.throttling.publisher.urlGroup]]
      receiverURLs = ["tcp://localhost:9611"]
      authURLs = ["ssl://localhost:9711"]
    # Data publisher object pool configurations
    [enforcer.throttling.publisher.pool]
      maxIdleDataPublishingAgents = 1000
      initIdleObjectDataPublishingAgents = 200
      # Data publisher thread pool configurations
      publisherThreadPoolCoreSize = 200
      publisherThreadPoolMaximumSize = 1000
      publisherThreadPoolKeepAliveTime = 200
    [enforcer.throttling.publisher.agent]
      # SSL Protocols
      sslEnabledProtocols = "TLSv1.2"
      # ciphers
      ciphers="TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  ,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256  ,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
      # The size of the queue event disruptor which handles events before they are published.
      # The value specified should always be the result of an exponent with 2 as the base.
      queueSize = 32768
      # The maximum number of events in a batch sent to the queue event disruptor at a given time
      batchSize = 200
      # The number of threads that will be reserved to handle events at the time you start
      corePoolSize = 1
      # Socket timeout
      socketTimeoutMS = 30000
      # The maximum number of threads that should be reserved at any given time to handle events
      maxPoolSize = 1
      # The amount of time which threads in excess of the core pool size may remain idle before being terminated.
      keepAliveTimeInPool = 20
      # The time interval between reconnection
      reconnectionInterval = 30
      # TCP connection pool configurations (for data publishing)
      maxTransportPoolSize = 250
      maxIdleConnections = 250
      evictionTimePeriod = 5500
      minIdleTimeInPool = 5000
      # SSL connection pool configurations (for authentication)
      secureMaxTransportPoolSize = 250
      secureMaxIdleConnections = 250
      secureEvictionTimePeriod = 5500
      secureMinIdleTimeInPool = 5000

# remove this from config and assign default values
[enforcer.analyticsReceiver]
    port = 18090
    maxMessageSize = 1000000000
    maxHeaderLimit = 8192
    #keep alive time of the external authz connection
    keepAliveTime = 600

    [enforcer.analyticsReceiver.threadPool]
        coreSize = 10
        maxSize = 100
        #keep alive time of threads in seconds
        keepAliveTime = 600
        queueSize = 1000

[controlPlane]
# Control plane's eventHub details
[controlPlane.eventHub]
  enabled = false
  serviceUrl = "https://apim:9443/"
  username="admin"
  password="$env{cp_admin_pwd}"
  environmentLabels = ["Production and Sandbox"]
  retryInterval = 5
  skipSSLVerification=true
  # Message broker connection URL of the control plane
  [controlPlane.eventHub.jmsConnectionParameters]
    eventListeningEndpoints = ["amqp://admin:admin@apim:5672?retries='5'&connectdelay='30000'"]

  [controlPlane.analytics]
      enabled = false
      authURL = "https://analytics-event-auth.st.choreo.dev/auth/v1"
      authToken = "eyJ4NXQiOiJOVGd5TTJabE9XVTJOV00zWlRVeFpESTRNamsyTWpoa1pEVTFOak15TjJZMlpHRTBPV1ExTVRFek9HVmtabVl4WlRVMU9Ea3dOekV6TnpjNU9EVXpaZyIsImtpZCI6Ik5UZ3lNMlpsT1dVMk5XTTNaVFV4WkRJNE1qazJNamhrWkRVMU5qTXlOMlkyWkdFME9XUTFNVEV6T0dWa1ptWXhaVFUxT0Rrd056RXpOemM1T0RVelpnX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJ3c28yX2Rldl9hZG1pbiIsImF1dCI6IkFQUExJQ0FUSU9OX1VTRVIiLCJpc3MiOiJodHRwczpcL1wvaWQucHJlcHJvZC5jaG9yZW8uZGV2OjQ0M1wvb2F1dGgyXC90b2tlbiIsImdyb3VwcyI6WyJJbnRlcm5hbFwvZXZlcnlvbmUiLCJBTkFMWVRJQ1MtQVBJTS5DT01cL21vbmV0aXplIl0sImF1ZCI6Im5wRk9oVG1aZjRTSUtUMFJFcGZQaDc0QTJWa2EiLCJlbnZpcm9ubWVudCI6InByb2QiLCJuYmYiOjE2MTQxODQ5NTcsImF6cCI6Im5wRk9oVG1aZjRTSUtUMFJFcGZQaDc0QTJWa2EiLCJzY29wZSI6ImFuYWx5dGljc19hcGltIG9wZW5pZCIsImN1c3RvbWVySWQiOiJ3c28yIiwiZXhwIjoxNjE1NDgwOTU3LCJpYXQiOjE2MTQxODQ5NTcsImp0aSI6IjFiYzJjMTAxLWM5YTYtNGQwOS1iMjJmLTE0OWQxNmYyZjg1ZSJ9.hKFAsQpV_CTMaE_6l4IcjZ-ZWYQEFPEf_EBrru5D73LYz7qkWAF67rLJqn29DizPf8Q8PsRRoeXiIO8St2hfv7QI6GW35ex1ak0I9g_8228I96WlO6IhdydoNYTi9Mvrq2_ZWzF3RwWBqM6vTSiIdFZB9rSJ54TmeVCQdI0IzKSXGV7LVN-kP6uXSiTF83eqEXNTaVnIqKZ_VEtitiVdASW3PU45C1ksD7NLFXjhkJHEUfkuBXXXJJr1oNOdEXMXdoky2kbI0coZQxo0vZOOfxhXoMnE5H9qkyt89qbv13ZR7jZx83lcZb4dar8ImvKZVUxkYbUaR49aRZd22jULEQ"
